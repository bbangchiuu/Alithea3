@using Alithea3.Models
@model Alithea3.Models.Customer
@{
    ViewBag.Title = "ThongTinKhacHang";
    Layout = "~/Views/Shared/_HomeLayout.cshtml";
    Dictionary<string, string> errors = new Dictionary<string, string>();
    if (ViewBag.errors != null)
    {
        errors = ViewBag.errors;
    }

    HttpCookie addressCookie = Request.Cookies["Address"];
}

<div class="detail8">
    <div class="container">
        <div class="row mb-3">
            <div class="col-sm-12 m-t-150 dsxacnhanorder">
                <div class="dsxacnhanorder-list float-left daxacnhanorder divfirst">
                    <a href="/BuyItem/Index">1.Sản phẩm đã chọn</a>
                </div>
                <!-- <div class="muitenxn muiten1 float-left"></div> -->
                <div class="dsxacnhanorder-list float-left">
                    <a href="/BuyItem/ThongTinKhacHang">2.Thông tin giao hàng</a>
                </div>
                <!-- <div class="right-triangle muiten2 float-left"></div> -->
                <div class="dsxacnhanorder-list float-left">
                    <a href="/BuyItem/XacNhanDonHang">3.Xác nhận đơn hàng</a>
                </div>
                <div class="phuorder divlast"></div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12 thongtinkh-list">
                @using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()
                    <div class="thongtinkh mb-3">
                        @Html.LabelFor(model => model.FullName)
                        @Html.EditorFor(model => model.FullName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.FullName, errors.ContainsKey("FullName") ? errors["FullName"] : "", new { @class = "text-danger", @id = "validateFullName" })
                    </div>
                    <div class="thongtinkh mb-3">
                        @Html.LabelFor(model => model.Email)
                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Email, errors.ContainsKey("Email") ? errors["Email"] : "", new { @class = "text-danger", @type = "email", @id = "validateEmail" })
                    </div>
                    <div class="thongtinkh mb-3">
                        @Html.LabelFor(model => model.Phone)
                        @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Phone, errors.ContainsKey("Phone") ? errors["Phone"] : "", new { @class = "text-danger", @id = "validatePhone" })
                    </div>
                    <div class="thongtinkh mb-3">
                        <label>Tỉnh</label>
                        <select class="form-control" id="tinh-thanh">
                            @if (addressCookie != null)
                            {
                                <option>@addressCookie["Tinh"]</option>
                            }
                            else
                            {
                                <option>Tỉnh</option>
                            }
                        </select>
                        @if (errors.ContainsKey("Tinh"))
                        {
                            <p class="text-danger">@errors["Tinh"]</p>
                        }
                    </div>
                    <div class="thongtinkh mb-3">
                        <label>Huyện</label>
                        <select class="form-control" id="huyen-tp">
                            @if (addressCookie != null)
                            {
                                <option>@addressCookie["Huyen"]</option>
                            }
                            else
                            {
                                <option>Huyện</option>
                            }

                        </select>
                        @if (errors.ContainsKey("Huyen"))
                        {
                            <p class="text-danger">@errors["Huyen"]</p>
                        }
                    </div>
                    <div class="thongtinkh mb-3">
                        @Html.LabelFor(model => model.Address)
                        @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Address, errors.ContainsKey("Address") ? errors["Address"] : "", new { @class = "text-danger", @id = "validateAddress" })
                    </div>
                    <input type="hidden" name="tinh" id="tinh" value="@(addressCookie != null ? @addressCookie["Tinh"] : "")">
                    <input type="hidden" name="huyen" id="huyen" value="@(addressCookie != null ? @addressCookie["Huyen"] : "")">
                    <div class="thongtinkh mb-3">
                        <button class="btn btn-success" type="submit" name="submitttkh" onclick="return checkthongtin()">Xác nhận đơn hàng</button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>
<script src="~/Content/public/javascripts/checkouts.js"></script>

@section scripts
{
    <script>
        var data = "";
        function readTextFile(file, callback) {
            var rawFile = new XMLHttpRequest();
            rawFile.overrideMimeType("application/json");
            rawFile.open("GET", file, true);
            rawFile.onreadystatechange = function () {
                if (rawFile.readyState === 4 && rawFile.status == "200") {
                    callback(rawFile.responseText);
                }
            }
            rawFile.send(null);
        }

        //usage:
        readTextFile("/Content/public/json/local.json", function (text) {
            data = JSON.parse(text);
            console.log(data);
            var textHtml = '';
            for (var i = 0; i < data.length; i++) {
                textHtml += '<option value="' + i + '">' + data[i].name + '</option>';
            }
            $('#tinh-thanh').append(textHtml);
        });

        $('#tinh-thanh').click(function () {
            var id = $(this).val();
            //console.log(data[id].districts);
            var textHtml = '<option value="-1">Huyện</option>';
            for (var i = 0; i < data[id].districts.length; i++) {
                textHtml += '<option value="' + i + '">' + data[id].districts[i].name + '</option>';
            }
            $('#huyen-tp').html(textHtml);

            if ($("#tinh-thanh option:selected").val() >= 0) {
                $("#tinh").val($("#tinh-thanh option:selected").text());
            }

        });

        $('#huyen-tp').click(function () {
            if ($("#huyen-tp option:selected").val() >= 0) {
                $("#huyen").val($("#huyen-tp option:selected").text());
            }
        });

    </script>
}
